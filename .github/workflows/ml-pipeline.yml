name: ML Pipeline with DVC and MLflow

on:
  push:
    branches: [ main, develop, Farhan ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_retrain:
        description: 'Force model retraining'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.9'
  DVC_CACHE_TYPE: 'symlink'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.setup-python.outputs.python-version }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

  data-pipeline:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ needs.setup.outputs.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install dvc[s3] mlflow boto3
        
    - name: Configure DVC
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        DVC_REMOTE_URL: ${{ secrets.DVC_REMOTE_URL }}
      run: |
        dvc remote add -d storage $DVC_REMOTE_URL
        dvc remote modify storage access_key_id $AWS_ACCESS_KEY_ID
        dvc remote modify storage secret_access_key $AWS_SECRET_ACCESS_KEY
        
    - name: Pull data with DVC
      run: |
        dvc pull
        
    - name: Check data drift
      id: data-drift
      run: |
        python scripts/check_data_drift.py
        echo "drift_detected=$(cat drift_status.txt)" >> $GITHUB_OUTPUT
        
    - name: Generate synthetic data if needed
      if: steps.data-drift.outputs.drift_detected == 'true' || github.event.inputs.force_retrain == 'true'
      run: |
        python synthetic_generator.py
        
    - name: Commit and push data changes
      if: steps.data-drift.outputs.drift_detected == 'true' || github.event.inputs.force_retrain == 'true'
      run: |
        dvc add Data/synthetic_ctgan_data.csv
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Data/synthetic_ctgan_data.csv.dvc .gitignore
        git commit -m "Update synthetic data [skip ci]" || exit 0
        dvc push
        git push

  model-training:
    needs: [setup, data-pipeline]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ needs.setup.outputs.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mlflow boto3
        
    - name: Configure MLflow
      env:
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
        MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      run: |
        echo "MLFLOW_TRACKING_URI=$MLFLOW_TRACKING_URI" >> $GITHUB_ENV
        echo "MLFLOW_TRACKING_USERNAME=$MLFLOW_TRACKING_USERNAME" >> $GITHUB_ENV
        echo "MLFLOW_TRACKING_PASSWORD=$MLFLOW_TRACKING_PASSWORD" >> $GITHUB_ENV
        
    - name: Pull latest data
      run: |
        dvc pull
        
    - name: Train model
      env:
        MLFLOW_EXPERIMENT_NAME: "personality-classification-${{ github.ref_name }}"
      run: |
        python train_with_mlflow.py
        
    - name: Upload model artifacts
      run: |
        dvc add Model/
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Model/.dvc .gitignore
        git commit -m "Update model artifacts [skip ci]" || exit 0
        dvc push

  model-evaluation:
    needs: [setup, model-training]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ needs.setup.outputs.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mlflow boto3
        
    - name: Configure MLflow
      env:
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
        MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      run: |
        echo "MLFLOW_TRACKING_URI=$MLFLOW_TRACKING_URI" >> $GITHUB_ENV
        echo "MLFLOW_TRACKING_USERNAME=$MLFLOW_TRACKING_USERNAME" >> $GITHUB_ENV
        echo "MLFLOW_TRACKING_PASSWORD=$MLFLOW_TRACKING_PASSWORD" >> $GITHUB_ENV
        
    - name: Pull latest artifacts
      run: |
        dvc pull
        
    - name: Evaluate model
      run: |
        python evaluate_model.py
        
    - name: Upload evaluation results
      uses: actions/upload-artifact@v3
      with:
        name: evaluation-results
        path: |
          Results/
          *.png
          *.txt

  deploy:
    needs: [setup, model-evaluation]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ needs.setup.outputs.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mlflow boto3
        
    - name: Configure MLflow
      env:
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
        MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      run: |
        echo "MLFLOW_TRACKING_URI=$MLFLOW_TRACKING_URI" >> $GITHUB_ENV
        echo "MLFLOW_TRACKING_USERNAME=$MLFLOW_TRACKING_USERNAME" >> $GITHUB_ENV
        echo "MLFLOW_TRACKING_PASSWORD=$MLFLOW_TRACKING_PASSWORD" >> $GITHUB_ENV
        
    - name: Deploy model to production
      run: |
        python scripts/deploy_model.py --environment production
        
    - name: Create GitHub Release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Model Release v${{ github.run_number }}
        body: |
          Automated model deployment
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref }}
        draft: false
        prerelease: false
